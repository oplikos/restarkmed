/*!
 * lazysizes - v4.1.1
 */
(function(window, factory) {
    var lazySizes = factory(window, window.document);
    window.lazySizes = lazySizes;
    
    if (typeof module === 'object' && module.exports) {
        module.exports = lazySizes;
    }
})(window, function(window, document) {
    'use strict';

    if (!document.getElementsByClassName) {
        return;
    }

    // Polyfills and utilities
    var docElem = document.documentElement;
    var DateNow = Date.now;
    var getComputedStyle = window.getComputedStyle;

    var defaults = {
        lazyClass: "lazyload",
        loadedClass: "lazyloaded",
        loadingClass: "lazyloading",
        preloadClass: "lazypreload",
        errorClass: "lazyerror",
        autosizesClass: "lazyautosizes",
        srcAttr: "data-src",
        srcsetAttr: "data-srcset",
        sizesAttr: "data-sizes",
        minSize: 40,
        customMedia: {},
        init: true,
        expFactor: 1.5,
        hFac: 0.8,
        loadMode: 2,
        loadHidden: true,
        ricTimeout: 0,
        throttleDelay: 125
    };

    var config = window.lazySizesConfig || window.lazysizesConfig || {};
    for (var key in defaults) {
        if (!(key in config)) {
            config[key] = defaults[key];
        }
    }

    window.lazySizesConfig = config;

    // Utility functions
    function hasClass(elem, className) {
        return (elem.getAttribute("class") || "").split(/\s+/).indexOf(className) !== -1;
    }

    function addClass(elem, className) {
        if (!hasClass(elem, className)) {
            var current = elem.getAttribute("class") || "";
            elem.setAttribute("class", current.trim() + " " + className);
        }
    }

    function removeClass(elem, className) {
        var classes = (elem.getAttribute("class") || "").split(/\s+/);
        var filtered = classes.filter(function(cls) {
            return cls !== className;
        });
        elem.setAttribute("class", filtered.join(" "));
    }

    function dispatchEvent(elem, name, detail) {
        var event = document.createEvent("CustomEvent");
        event.initCustomEvent(name, true, true, detail || {});
        elem.dispatchEvent(event);
        return event;
    }

    function getCSS(elem, style) {
        return getComputedStyle(elem, null)[style];
    }

    // Debounce / throttle helpers
    function throttle(fn, delay) {
        var lastCall = 0;
        var timeout;
        return function() {
            var now = DateNow();
            var remaining = delay - (now - lastCall);
            var context = this;
            var args = arguments;
            if (remaining <= 0) {
                clearTimeout(timeout);
                lastCall = now;
                fn.apply(context, args);
            } else {
                clearTimeout(timeout);
                timeout = setTimeout(function() {
                    lastCall = DateNow();
                    fn.apply(context, args);
                }, remaining);
            }
        };
    }

    // Main loader
    var loader = {
        elements: [],
        checkElements: function() {
            // Loop over lazy elements and check if they're in viewport
        },
        unveil: function(elem) {
            // Reveal the image by swapping in src/srcset
        },
        init: function() {
            this.elements = document.getElementsByClassName(config.lazyClass);
            this.bindEvents();
            this.checkElements();
        },
        bindEvents: function() {
            window.addEventListener("scroll", this.checkElements);
            window.addEventListener("resize", this.checkElements);
            document.addEventListener("DOMContentLoaded", this.checkElements);
        }
    };

    if (config.init) {
        setTimeout(function() {
            loader.init();
        });
    }

    return {
        cfg: config,
        init: loader.init,
        checkElems: loader.checkElements,
        unveil: loader.unveil
    };
});
